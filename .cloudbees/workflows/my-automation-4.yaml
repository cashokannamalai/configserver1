apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: My Automation
on:
  push:
    branches:
      - ashok
jobs:
  Checkout:
    steps:
      - name: Checkout Source Code
        uses: cloudbees-io/checkout@v1

  Build:
    needs: Checkout
    environment: sampleflag
    steps:
      - name: Configure Git
        uses: docker://alpine/git:latest
        run: |
          git config --global --add safe.directory /cloudbees/workspace
      - name: Checkout
        uses: cloudbees-io/checkout@v1
      - name: Build and Run Application
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          mvn clean package
          mvn cyclonedx:makeBom

  SonarQube:
    needs: Build
    environment: sampleflag
    steps:
      - name: Checkout Source Code
        uses: cloudbees-io/checkout@v1

      - name: Configure SonarQube Scanner
        uses: docker://alpine/git:latest
        run: |
          mkdir -p ~/.sonar
          echo "sonar.host.url=https://sonarqube.cb-demos.io/" > ~/.sonar/sonar.properties
          echo "sonar.login=85c8d567a7234061041a0149cb28841003f82831" >> ~/.sonar/sonar.properties
      - name: Run SonarQube Scanner
        uses: docker://maven:3-eclipse-temurin-17
        run: |
          mvn sonar:sonar -Dsonar.projectKey=config-server -Dsonar.host.url=https://sonarqube.cb-demos.io/ -Dsonar.login=85c8d567a7234061041a0149cb28841003f82831

  SonarQubeReport:
    needs: SonarQube
    environment: sampleflag
    steps:
      - name: Fetch SonarQube Vulnerabilities
        uses: docker://curlimages/curl:latest
        run: |
          # Fetch the project key from your SonarQube instance
          PROJECT_KEY="spring-petclinic-config-server"
          SONAR_HOST="https://sonarqube.cb-demos.io"
          SONAR_TOKEN="85c8d567a7234061041a0149cb28841003f82831"

          # Request vulnerability metrics
          RESPONSE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST}/api/issues/search?projectKeys=${PROJECT_KEY}&types=VULNERABILITY")

          # Extract and display relevant information
          TOTAL=$(echo $RESPONSE | jq '.total')
          OPEN=$(echo $RESPONSE | jq '.issues[] | select(.status == "OPEN") | length')
          REOPENED=$(echo $RESPONSE | jq '.issues[] | select(.status == "REOPENED") | length')
          RESOLVED=$(echo $RESPONSE | jq '.issues[] | select(.status == "RESOLVED") | length')

          echo "Total Vulnerabilities Found: ${TOTAL}"
          echo "Open Vulnerabilities: ${OPEN}"
          echo "Reopened Vulnerabilities: ${REOPENED}"
          echo "Resolved Vulnerabilities: ${RESOLVED}"
